name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: 'DevWorkshop.TaskAPI.sln'

jobs:
  build-and-test:
    name: 🏗️ Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: 🏗️ Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release
      
    - name: 🧪 Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: 🔍 Run code analysis
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --verbosity normal
      
    - name: 📋 Check formatting
      run: dotnet format ${{ env.SOLUTION_PATH }} --verify-no-changes --verbosity diagnostic

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: 🔒 Run security scan
      run: |
        dotnet list ${{ env.SOLUTION_PATH }} package --vulnerable --include-transitive
        dotnet list ${{ env.SOLUTION_PATH }} package --deprecated

  educational-validation:
    name: 🎓 Educational Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Validate TODO comments
      run: |
        echo "🔍 Checking for proper TODO format..."
        if grep -r "TODO:" --include="*.cs" . | grep -v "TODO: ESTUDIANTE\|TODO: STUDENT"; then
          echo "❌ Found TODOs that don't follow educational format"
          echo "✅ Use: // TODO: ESTUDIANTE - Description"
          exit 1
        else
          echo "✅ All TODOs follow educational format"
        fi
        
    - name: 📚 Check documentation
      run: |
        echo "📚 Validating documentation..."
        if [ ! -f "README.md" ]; then
          echo "❌ README.md is missing"
          exit 1
        fi
        if [ ! -f "CONTRIBUTING.md" ]; then
          echo "❌ CONTRIBUTING.md is missing"
          exit 1
        fi
        echo "✅ Documentation files present"
        
    - name: 🏗️ Validate Clean Architecture
      run: |
        echo "🏗️ Checking Clean Architecture compliance..."
        
        # Check that Domain has no external dependencies
        if grep -r "using Microsoft\|using System.Data\|using Newtonsoft" DevWorkshop.TaskAPI.Domain/ --include="*.cs" | grep -v "using System;"; then
          echo "❌ Domain layer has external dependencies"
          exit 1
        fi
        
        # Check that Application only depends on Domain
        if grep -r "using DevWorkshop.TaskAPI.Infrastructure\|using DevWorkshop.TaskAPI.Api" DevWorkshop.TaskAPI.Application/ --include="*.cs"; then
          echo "❌ Application layer has invalid dependencies"
          exit 1
        fi
        
        echo "✅ Clean Architecture compliance validated"

  api-documentation:
    name: 📖 API Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: 🏗️ Build API project
      run: dotnet build DevWorkshop.TaskAPI.Api/DevWorkshop.TaskAPI.Api.csproj --configuration Release
      
    - name: 📖 Validate API documentation
      run: |
        echo "📖 Checking API documentation..."
        
        # Check for XML documentation
        if ! find . -name "*.xml" -path "*/bin/Release/*" | grep -q "DevWorkshop.TaskAPI.Api.xml"; then
          echo "⚠️ API XML documentation not found (this is OK for educational template)"
        else
          echo "✅ API XML documentation found"
        fi
        
        # Check for proper controller documentation
        if ! grep -r "/// <summary>" DevWorkshop.TaskAPI.Api/Controllers/ --include="*.cs"; then
          echo "❌ Controllers missing XML documentation"
          exit 1
        else
          echo "✅ Controllers have XML documentation"
        fi

  notify-status:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan, educational-validation, api-documentation]
    if: always()
    
    steps:
    - name: 📢 Report Status
      run: |
        echo "🎯 CI/CD Pipeline Results:"
        echo "🏗️ Build and Test: ${{ needs.build-and-test.result }}"
        echo "🔍 Code Quality: ${{ needs.code-quality.result }}"
        echo "🔒 Security Scan: ${{ needs.security-scan.result }}"
        echo "🎓 Educational Validation: ${{ needs.educational-validation.result }}"
        echo "📖 API Documentation: ${{ needs.api-documentation.result }}"
        
        if [[ "${{ needs.build-and-test.result }}" == "success" && 
              "${{ needs.code-quality.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.educational-validation.result }}" == "success" && 
              "${{ needs.api-documentation.result }}" == "success" ]]; then
          echo "✅ All checks passed! Ready for educational use 🎓"
        else
          echo "❌ Some checks failed. Please review and fix issues."
        fi
